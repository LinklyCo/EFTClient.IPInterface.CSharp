using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace PCEFTPOS.EFTClient.IPInterface.TestPOS.ViewModel
{

    public class ClientViewModel : INotifyPropertyChanged
    {
        const string QPAD_FILENAME = "padtags.json";
        const string TRACK2_FILENAME = "Track2_List.json";
        const string SLAVE_CMD_FILENAME = "slave.json";
        const string SETTINGS_FILENAME = "settings.json";
        const string ENDPOINTS_FILENAME = "endpoints.json";
        readonly EftWrapper eftw = null;
        ProxyDialog proxy = new ProxyDialog();

        public event LogEvent OnLog;

        public ClientViewModel()
        {
            // initialize external data
            Data.Track2Items  = PadEditor.GetData(TRACK2_FILENAME);
            Data.PadItems     = PadEditor.GetData(QPAD_FILENAME);
            Data.CommandsList = PadEditor.GetData(SLAVE_CMD_FILENAME);

            // Set up defaults
            if (Data.PadItems.Count <= 0)
            {
                Data.PadItems = PadEditor.AddData(QPAD_FILENAME, new ExternalData("Pay @ Table", "PAT0011"));
            }
            if (Data.CommandsList.Count <= 0)
            {
                PadEditor.AddData(SLAVE_CMD_FILENAME, new ExternalData("Enter Slave Mode", "*@101S1004300 "));
                PadEditor.AddData(SLAVE_CMD_FILENAME, new ExternalData("Display 'Swipe Card'", "*@103Z 0060220  D 0240000   SWIPE CARD       D 0240100                    "));
                PadEditor.AddData(SLAVE_CMD_FILENAME, new ExternalData("Swipe Card", "*@102J1000K100810000010"));
                PadEditor.AddData(SLAVE_CMD_FILENAME, new ExternalData("Exit Slave Mode", "*@101S0000"));
                Data.CommandsList = PadEditor.AddData(SLAVE_CMD_FILENAME, new ExternalData("Complete Read Card Command", "*@107S1004300 Z 0060216  D 0240000   SWIPE CARD       D 0240100                    J1000K100810000010S0000"));
            }

            // load endpoints from file //
            var endPointEditor = new EndpointEditor(ENDPOINTS_FILENAME);
            Data.EndPoints = endPointEditor.EndPoints;
            // Insert auto local end-points
            Data.CurrentEndPoint = Data.EndPoints.FirstOrDefault();

            // setup data
            Data.PropertyChanged += Data_PropertyChanged;
            eftw = new EftWrapper(Data);

            Data.OnLog += Data_OnLog;
            Data.OnDisplay += Data_OnDisplay;
            Data.OnDisplayChanged += Data_OnDisplayChanged;

            proxyVM.OnSendKey += ProxyVM_OnSendKey;
        }

        private void Data_OnDisplayChanged(object sender, EventArgs e)
        {
            ProxyVM.DisplayDetails = Data.DisplayDetails;
        }

        private async void ProxyVM_OnSendKey(object sender, EFTSendKeyRequest e)
        {
            await eftw.SendKey(e.Key, e.Data);
        }

        private void Data_OnDisplay(bool show)
        {
            ShowProxyDialog(show);
        }

        public void Initialize()
        {
            LoadSettings();
        }

        private void Data_OnLog(string message)
        {
            OnLog?.Invoke(message);
        }

        #region Common
        public event PropertyChangedEventHandler PropertyChanged;

        protected void NotifyPropertyChanged(string info)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(info));
        }

        private void Data_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            NotifyPropertyChanged(e.PropertyName);
        }
        #endregion

        #region Properties
        public string AppTitle => $"Linkly Test POS (v{Assembly.GetExecutingAssembly().GetName().Version})";
        public ClientData Data { get; } = new ClientData();
        #endregion


        #region Common
        public RelayCommand ClearResult
        {
            get
            {
                return new RelayCommand((o) =>
                {
                    Data.LastTxnType = null;
                    Data.LastTxnResult = new Dictionary<string, string>();
                });
            }
        }

        private void LoadSettings()
        {
            try
            {
                var settings = new JsonWriter();
                settings.Load(SETTINGS_FILENAME, out UserSettings data);

                if (data != default(UserSettings))
                {
                    data.CloudInfo.LoadCredentials();
                    Data.Settings = data;

                    Data.PrintMode = (ReceiptPrintModeType)Data.Settings.PrintMode;
                }
            }
            catch(Exception e)
            {
                Data.Log($"Exception loading settings. {e.Message}", LogType.Error);
            }
        }

        public void SaveSettings()
        {
            try
            {
                Data.Settings.PrintMode = (int)Data.PrintMode;
                Data.Settings.CloudInfo.SaveCredentials();

                JsonWriter settings = new JsonWriter();
                settings.Save(Data.Settings, SETTINGS_FILENAME);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(ex.Message);
            }
        }

        public RelayCommand AbandonInProgressCommand
        {
            get
            {
                return new RelayCommand(o =>
                {
                    string request = eftw.requestInProgressString;
                    if (MessageBox.Show($"Abandon in progress '{request}'?", $"Abandon '{request}'?", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                    {
                        _ = eftw.SendKey(EFTPOSKey.OkCancel);
                        eftw.requestInProgress = null;
                    }
                });
            }
        }

        public RelayCommand ClearHistoryCommand => new RelayCommand(o => Data.MessageHistory.Clear());

        #endregion

        #region Connection
        public async Task<bool> ConnectAsync()
        {
            var r = await eftw.Connect(Data.Settings.Host, Data.Settings.Port, Data.Settings.UseSSL);
            Data.IsSettingsShown = !r;
            return r;
        }

        public async Task<bool> ConnectAsync(string host, int port, bool useSSL)
        {
            Data.Settings.Host = host;
            Data.Settings.Port = port;
            Data.Settings.UseSSL = useSSL;
            return await ConnectAsync();
        }

        public void Disconnect()
        {
            eftw.Disconnect();
            Data.IsSettingsShown = true;
        }

        public RelayCommand Connect
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    if (Data.ConnectedState == ConnectedStatus.Disconnected)
                    {
                        if (Data.Settings.UseSSL)
                        {
                            string p = (string)o;
                            await DoCloudLogon(p);
                        }
                        else
                        {
                            await eftw.Connect(Data.Settings.Host, Data.Settings.Port, Data.Settings.UseSSL);
                        }
                    }
                    else
                    {
                        eftw.Disconnect();
                    }
                });
            }
        }
        #endregion

        #region ConnectToEndpoint
        public RelayCommand ConnectToEndpointCommand
        {
            get 
            {
                return new RelayCommand(async (o) =>
                {
                    try
                    {
                        if (Data.ConnectedState == ConnectedStatus.Connected)
                        {
                            Disconnect();
                            return;
                        }

                        var p = Data.CurrentEndPoint;
                        if (p == null)
                        {
                            Data.Log("Add a new end-point to connect to", LogType.Info);
                            return;
                        }

                        // Attempt to connect
                        switch (p.Type)
                        {
                            case EndPointType.Local:
                                Data.Log($"Local connection to {p.Address}:{p.Port}...", LogType.Info);
                                await ConnectAsync(p.Address, p.Port, p.UseSSL);
                                break;
                            case EndPointType.CloudWithLegacyPairing:
                                Data.Log($"Cloud (legacy pairing) connection to {p.Address}:{p.Port}...", LogType.Info);

                                Data.Settings.CloudInfo.ClientId = p.ClientId;
                                Data.Settings.CloudInfo.Password = p.Password;
                                Data.Settings.CloudInfo.PairingCode = p.PairingCode;

                                await ConnectAsync(p.Address, p.Port, p.UseSSL);
                                await DoCloudLogon(p.Password);
                                break;
                            case EndPointType.Cloud:
                                Data.Log($"Cloud connection to {p.Address}:{p.Port}...", LogType.Info);
                                if (string.IsNullOrEmpty(p.Token))
                                {
                                    Data.Log($"Invalid token. Pair with pinpad in end-point settings to continue...", LogType.Info);
                                }
                                else
                                {
                                    await ConnectAsync(p.Address, p.Port, p.UseSSL);
                                    await DoCloudTokenLogon(p.Token);
                                }
                                break;
                        }
                    }
                    catch (Exception ex)
                    {
                        Data.Log(ex.Message, LogType.Error);
                    }
                });
            }
        }
        #endregion

        #region CloudLogon
        public RelayCommand CloudLogonCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    try
                    {
                        var p = Data.CurrentEndPoint;
                        if (p == null)
                        {
                            Data.Log("Not connected to an endpoint", LogType.Info);
                            return;
                        }

                        // Attempt to connect
                        switch (p.Type)
                        {
                            case EndPointType.Local:
                                break;
                            case EndPointType.CloudWithLegacyPairing:
                                Data.Log($"Cloud (legacy pairing) connection to {p.Address}:{p.Port}...", LogType.Info);
                                
                                Data.Settings.CloudInfo.ClientId = p.ClientId;
                                Data.Settings.CloudInfo.Password = p.Password;
                                Data.Settings.CloudInfo.PairingCode = p.PairingCode;

                                await DoCloudLogon(p.Password);
                                break;
                            case EndPointType.Cloud:
                                Data.Log($"Cloud connection to {p.Address}:{p.Port}...", LogType.Info);
                                if (string.IsNullOrEmpty(p.Token))
                                {
                                    Data.Log($"Invalid token. Pair with pinpad in end-point settings to continue...", LogType.Info);
                                }
                                else
                                {
                                    await DoCloudTokenLogon(p.Token);
                                }
                                break;
                        }
                    }
                    catch (Exception ex)
                    {
                        Data.Log(ex.Message, LogType.Error);
                    }
                });
            }
        }
        #endregion

        #region Logon
        public RelayCommand LogonCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    var r = new EFTLogonRequest()
                    {
                        LogonType = Data.SelectedLogon,
                        CutReceipt = Data.CutReceiptMode,
                        ReceiptAutoPrint = Data.PrintMode,
                        Application = Data.Application,
                        Merchant = Data.MerchantNumber,
                        PurchaseAnalysisData = GetPad(false)
                    };

                    await eftw.Logon(r, false);
                });
            }
        }

        public RelayCommand CloudLogon
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    string p = (string)o;
                    await DoCloudLogon(p);
                });
            }
        }

        public async Task DoCloudLogon(string password, bool pairingReq = false, bool autoLogin = false)
        {
            try
            {
                if (Data.ConnectedState == ConnectedStatus.Disconnected)
                {
                    var r = await eftw.Connect(Data.Settings.Host, Data.Settings.Port, Data.Settings.UseSSL);
                    if (!r)
                        return;
                }

                Data.Settings.CloudInfo.Password = password;
                if (pairingReq)
                {
                    await eftw.CloudPairingRequest(Data.Settings.CloudInfo.ClientId, Data.Settings.CloudInfo.Password, Data.Settings.CloudInfo.PairingCode);
                }
                else
                {
                    await eftw.CloudLogon(Data.Settings.CloudInfo.ClientId, Data.Settings.CloudInfo.Password, Data.Settings.CloudInfo.PairingCode);
                }

                if (Data.Settings.CloudInfo.IsAutoLogin && !autoLogin)
                {
                    SaveSettings();
                }
            }
            catch (Exception ex)
            {
                Data_OnLog(ex.Message);
            }
        }

        public async Task DoCloudTokenLogon(string token)
        {
            try
            {
                if (Data.ConnectedState == ConnectedStatus.Disconnected)
                {
                    var r = await eftw.Connect(Data.Settings.Host, Data.Settings.Port, Data.Settings.UseSSL);
                    if (!r)
                        return;
                }

                await eftw.CloudTokenLogon(token);
            }
            catch (Exception ex)
            {
                Data_OnLog(ex.Message);
            }

        }

        public RelayCommand ToggleLogonCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    if (!Data.LogonTestEnabled)
                    {
                        Data.LogonTestEnabled = true;
                        await eftw.StartLogonTest(Data.SelectedLogon, Data.CutReceiptMode, Data.PrintMode);
                    }
                    else
                    {
                        Data.LogonTestEnabled = false;
                        eftw.StopLogonTest();
                    }
                });
            }
        }

        public RelayCommand ToggleHeartbeatTestCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    if (!Data.HeartbeatTestEnabled)
                    {
                        Data.HeartbeatTestEnabled = true;
                        await eftw.StartHeartbeatTest();
                    }
                    else
                    {
                        Data.HeartbeatTestEnabled = false;
                        eftw.StopHeartbeatTest();
                    }
                });
            }
        }

        #endregion

        #region PadTag
        private PadTag SetPadTag(PadField padField, bool setTag, string tagName, string newData, bool forceReplace)
        {
            if (setTag && !string.IsNullOrEmpty(newData) && (!padField.HasTag(tagName) || forceReplace))
            {
                return padField.SetTag(tagName, newData);
            }

            return null;
        }

        private void UpdateAndSavePadList(PadField padField)
        {
            foreach (PadTag tag in padField)
            {
                string tagString = tag.ToString();
                if (Data.PadItems.Find(x => x.Value.Equals(tagString)) == null)
                {
                    ExternalData newData = new ExternalData(tagString, tagString);
                    PadEditor.AddData(QPAD_FILENAME, newData);
                    Data.PadItems.Add(newData);
                    NotifyPropertyChanged("PadList");
                    Data.PadItemsList.Last().IsChecked = true;
                }
            }
        }

        PadField GetPad(bool includeAutoPadTags)
        {
            var pf = new PadField(Data.SelectedPad);

            UpdateAndSavePadList(pf);

            if (includeAutoPadTags)
            {
                SetPadTag(pf, Data.PADAppendAMT, "AMT", decimal.ToInt32(Data.TransactionRequest.AmtPurchase * 100).ToString(), false);
                SetPadTag(pf, Data.PADAppendNME, "NME", "Linkly Test POS", false);
                SetPadTag(pf, Data.PADAppendVER, "VER", Data.POSVersion, false);
                SetPadTag(pf, Data.PADAppendOPR, "OPR", "0|USER", false);
                SetPadTag(pf, Data.PADAppendUID, "UID", Guid.NewGuid().ToString("N"), false);
                SetPadTag(pf, Data.PADAppendVND, "VND", Data.POSVendorId.ToString("N"), false);
                SetPadTag(pf, Data.PADAppendPCM, "PCM", Data.PADPCMBarcode ? "10000000" : "00000000", false);
                SetPadTag(pf, Data.PADAppendSKU, "SKU", Data.PADSKUId, false);
                SetPadTag(pf, Data.PADAppendLastRFN, "RFN", Data.LastTxnRFN, false);
            }
            return pf;
        }
        #endregion

        #region Transaction
        private string GetAndSaveSelectedTrack2()
        {
            string track2 = string.Empty;
            if(Data.TransactionRequest.PanSource != PanSource.POSSwiped)
            {
                Data.SelectedTrack2 = string.Empty;
            }
            else if(!string.IsNullOrEmpty(Data.SelectedTrack2))
            {
                var selectedTrack = Data.Track2Items.Find(x => x.ToString().Equals(Data.SelectedTrack2));
                if (selectedTrack != null)
                {
                    //Use the saved track2 value
                    track2 = selectedTrack.Value;
                }
                else
                {
                    string[] track2Fields = Data.SelectedTrack2.Split(new string[] { " | " }, 2, StringSplitOptions.RemoveEmptyEntries);
                    string name;
                    if(track2Fields.Length == 2)
                    {
                        //Selected track2 looks like a saved value, extract name/value and update
                        name = track2Fields[0];
                        track2 = track2Fields[1];
                    }
                    else
                    {
                        //Use track2 as the name for new data to save
                        name = Data.SelectedTrack2;
                        track2 = Data.SelectedTrack2;
                    }
                    Data.Track2Items = PadEditor.AddData(TRACK2_FILENAME, new ExternalData(name, track2));
                }
            }

            return track2;
        }

        public RelayCommand TransactionCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    try
                    {
                        Data.TransactionRequest.Track2 = GetAndSaveSelectedTrack2();

                        if (Data.AutoTransactionReference)
                        {
                            Data.TransactionReference = DateTime.Now.ToString("yyMMddHHmmssffff");
                        }

                        Data.TransactionRequest.Application = Data.Application;
                        Data.TransactionRequest.PurchaseAnalysisData = GetPad(true);
                        Data.TransactionRequest.TxnRef = Data.TransactionReference;
                        Data.TransactionRequest.ReceiptAutoPrint = Data.PrintMode;
                        Data.TransactionRequest.CutReceipt = Data.CutReceiptMode;
                        await eftw.DoTransaction(Data.TransactionRequest);
                    }
                    catch (Exception ex)
                    {
                        Data.Log(ex.Message);
                    }
                });
            }
        }

        public RelayCommand QueryTransaction
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    try
                    {
                        if (!Data.IsETS)
                        {
                            Data.TransactionRequest.Application = TerminalApplication.EFTPOS;
                            Data.Application = TerminalApplication.EFTPOS;
                        }

                        if (Data.AutoTransactionReference)
                        {
                            Data.TransactionReference = DateTime.Now.ToString("yyMMddHHmmssffff");
                        }

                        Data.TransactionRequest.TxnRef = Data.TransactionReference;

                        bool oneButton = Data.TransactionRequest.Merchant == "99";
                        await eftw.QueryCard(GetPad(false), QueryCardType.ReadCard, Data.TransactionRequest.Merchant);

                        Data.LastTxnResult.TryGetValue("Success", out string result);
                        if (result != null && result.Equals("True"))
                        {
                            if(oneButton)
                            {
                                string id = string.Empty;
                                Data.LastTxnResult.TryGetValue("CardBin", out id);
                                Data.TransactionRequest.Merchant = id;
                            }
                            else if(!string.IsNullOrEmpty(Data.SelectedTrack2))
                            {
                                Data.SelectedCardSource = PanSource.POSSwiped.ToString();
                                Data.TransactionRequest.PanSource = PanSource.POSSwiped;
                                Data.TransactionRequest.Track2 = GetAndSaveSelectedTrack2();
                            }
                            else
                            {
                                return;
                            }

                            Data.TransactionRequest.PurchaseAnalysisData = GetPad(true);
                            await eftw.DoTransaction(Data.TransactionRequest);

                            if (oneButton)
                            {
                                Data.TransactionRequest.Merchant = "99";//reset this back to 99
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Data.Log(ex.Message);
                    }
                });
            }
        }

        public RelayCommand LaunchTrack2
        {
            get
            {
                return new RelayCommand((o) =>
                {
                    PadEditor editor = new PadEditor(TRACK2_FILENAME, "Track2", false);
                    if (editor.ShowDialog() == true)
                    {
                        Data.Track2Items = editor.ViewModel.UpdatedExternalData;
                    }
                });
            }
        }

        public RelayCommand LaunchSlaveEditor
        {
            get
            {
                return new RelayCommand((o) =>
                {
                    PadEditor editor = new PadEditor(SLAVE_CMD_FILENAME, "Slave", false);
                    if (editor.ShowDialog() == true)
                    {
                        Data.CommandsList = editor.ViewModel.UpdatedExternalData;
                    }
                });
            }
        }

        public RelayCommand LaunchPad
        {
            get
            {
                return new RelayCommand((o) =>
                {
                    PadEditor editor = new PadEditor(QPAD_FILENAME);
                    if (editor.ShowDialog() == true)
                    {
                        Data.PadItems = editor.ViewModel.UpdatedExternalData;
                    }
                });
            }
        }

        public RelayCommand LaunchEndpointEditorCommand
        {
            get
            {
                return new RelayCommand((o) =>
                {
                    var editor = new EndpointEditor(ENDPOINTS_FILENAME);
                    if (editor.ShowDialog() == true)
                    {
                        Data.EndPoints = editor.EndPoints;
                        Data.CurrentEndPoint = Data.EndPoints.FirstOrDefault();
                    }
                });
            }
        }

        #endregion

        #region Status
        public RelayCommand StatusCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.GetStatus(new EFTStatusRequest { Application = Data.Application, Merchant = Data.MerchantNumber, StatusType = Data.SelectedStatus });
                });
            }
        }

        #endregion

        #region ClientList

        public RelayCommand ClientListCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.DoClientList(new EFTClientListRequest());
                });
            }
        }

        #endregion

        #region Configure Merchant
        public RelayCommand ConfigureMerchant
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.ConfigureMerchant(Data.MerchantDetails);
                });
            }
        }
        #endregion

        #region Settlement
        public RelayCommand SettlementCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.DoSettlement(Data.SelectedSettlement, Data.CutReceiptMode, GetPad(false), Data.PrintMode, Data.ResetTotals);
                });
            }
        }
        #endregion

        #region Control Panel

        public RelayCommand DisplayControlPanelCommand
        {
            get { return new RelayCommand(async (o) => await eftw.DisplayControlPanel(Data.SelectedDisplay, Data.CutReceiptMode, Data.PrintMode)); }
        }

        #endregion

        #region Query Card

        public RelayCommand QueryCardCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.QueryCard(GetPad(false), Data.SelectedQuery, Data.MerchantNumber, Data.Application);
                });
            }
        }


        #endregion

        #region Last Transaction

        public RelayCommand LastTransactionCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.GetLastTransaction();
                });
            }
        }


        #endregion

        #region Re-print Receipt

        public RelayCommand ReprintReceiptCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.LastReceipt(Data.CutReceiptMode, Data.PrintMode, ReprintType.Reprint);
                });
            }
        }

        public RelayCommand GetLastReceiptCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.LastReceipt(Data.CutReceiptMode, Data.PrintMode, ReprintType.GetLast);
                });
            }
        }

        #endregion

        #region Verify Cheque

        public RelayCommand VerifyCheque
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.DoVerifyCheque(Data.ChequeRequest);
                });
            }
        }


        #endregion

        #region Set Dialog
        public RelayCommand SetDialogCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.SetDialog(Data.DialogRequest);
                });
            }
        }

        public RelayCommand HideDialog
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    DialogType t = ((bool)o ? DialogType.Hidden : DialogType.Standard);
                    SetDialogRequest r = new SetDialogRequest
                    {
                        DialogX = Data.DialogRequest.DialogX,
                        DialogY = Data.DialogRequest.DialogY,
                        DialogPosition = Data.DialogRequest.DialogPosition,
                        DialogTitle = Data.DialogRequest.DialogTitle,
                        EnableTopmost = Data.DialogRequest.EnableTopmost,
                        DialogType = t
                    };

                    await eftw.SetDialog(r);
                });
            }
        }


        #endregion

        #region Slave Mode
        public RelayCommand SlaveMode
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    if(Data.SelectedCommand == null)
                    {
                        ExternalData slaveCmd = new ExternalData(Data.CommandRequest, Data.CommandRequest);
                        Data.CommandsList = PadEditor.AddData(SLAVE_CMD_FILENAME, slaveCmd);
                        Data.SelectedCommand = slaveCmd;
                    }
                    await eftw.DoSlaveMode(Data.CommandRequest);
                });
            }
        }

        public string SlaveDisplayLinesWidth { get; set; } = "16";
        public string SlaveDisplayLinesText { get; set; } = "THIS IS LINE [XX]";

        private RelayCommand DoSlaveDispLines(int count)
        {
            return new RelayCommand(async (o) =>
            {
                if (!int.TryParse(SlaveDisplayLinesWidth, out int width) || SlaveDisplayLinesText == null)
                    return;

                StringBuilder sb = new StringBuilder($"*@1{count + 1:D2}Z 006{count:D2}{width:D2}  ");

                for (int i = 0; i < count; i++)
                {
                    string text = SlaveDisplayLinesText.Replace("[XX]", $"{i + 1:D2}").PadRight(width).Substring(0, width);
                    sb.Append($"D 020{i:D2}00{text}");
                }

                await eftw.DoSlaveMode(sb.ToString());
            });
        }

        private const string SLAVE_MODE_ENTER         = "*@101S1004300 ";
        private const string SLAVE_MODE_EXIT          = "*@101S0000";
        private const string SLAVE_MODE_STATUS        = "*@101N0000";
        private const string SLAVE_INPUT_ALPHA        = "*@103Z 0060416  D 0240000ALPHA INPUT         EA00800000301";
        private const string SLAVE_INPUT_DEFAULT      = "*@103Z 0060416  D 0240000DEFAULT INPUT       E 00800000301";
        private const string SLAVE_INPUT_AMOUNT       = "*@103Z 0060416  D 0240000AMOUNT INPUT        E$00800000301";
        private const string SLAVE_INPUT_MASKED       = "*@103Z 0060416  D 0240000ENTER CODE:         E*00800000301";
        private const string SLAVE_KEY_ONE            = "*@101K100811111111";
        private const string SLAVE_KEY_MANY           = "*@101K200811111111";
        private const string SLAVE_KEY_OFF            = "*@101K000811111111";
        private const string SLAVE_IMAGE_32x32        = "*@103MD002TiMW046Ti\x02\x15\x00\x00~~\x00\x00\x00\x00~~BBBBBBrrrr~~\x00\x00\x01\x80\x01\x80\x00\x00\x00\x0c\x00\xf0\x0f\x00" + "0\x00\x00\x00\x00\x00" + "DI0060000Ti";
        private const string SLAVE_IMAGE_128x64       = "*@105MD002TiMW402Ti\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xd7\xba\xa5*xg\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x10" + "Fq\x1c\xc7)$\x10\x00\x00\x00\x00\x00\x00\x00\x00\x17" + "F\xdb\x09\x12\x96" + "e\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x17R\x86Q\x11\xd0\xa5\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x17G8/\xfa\x86%\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x10I\x9a\xdc{\x91" + "D\x10\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xd5UUUUW\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xefT~F\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xd7\xf1\x87\xd3\x12\xd8\x90\x00\x00\x00\x00\x00\x00\x00\x00\x14\x87_EuG\x93@\x00\x00\x00\x00\x00\x00\x00\x00\x09j\xaf\xe0hV\xc2\x10\xfd\xf6o\xc3\x06\xcd\xf0" + "0\x1d\x84\x0b\xc2\x1f*\x99@1\x86" + "c\x03\x06\xcd\x80p\x08" + "eM\xb6\xb4.\xbfP1\x83\xc3\x03\x06\xed\x80\xf0\x10\xac\xf3\xd1\xd5;\xaa\xa0" + "1\xf1\x83\x03\x06\xed\xf0\xb0\x13\xfaI (\xae\xbf\xe0" + "1\x81\x83\x03\x06\xdd\x80" + "0\x09\xa9\xef\xb9*Df\xb0" + "1\x83\xc3\x03\x06\xdd\x80" + "0\x1e_\x01\xbf\x27\x11\xd2\xe0" + "1\x86" + "c\x03\x06\xcd\x80" + "0\x02\x8f" + "7\xd7\x99" + "D\x97p1\xf6" + "c\x03\xf6\xcd\xf0" + "0\x03\xe6O!\xacUF0\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x8c\xe3\xb3/\xbaZ`\x00\x00\x00\x00\x00\x00\x00\x00\x09n;\xb7$\xfe>P\x00\x00\x00\x00\x00\x00\x00\x00\x01)\x0e\xf2\x95\x8bk@\x00\x00\x00\x00\x00\x00MW402Ti\x00\x00\x1b\xf9)\x10\xa8\xfe~\x10\x00\x00\x00\x00\x00\x00\x00\x00\x08\x08~i\x1aH\xa4`\x00\x00\x00\x00\x00\x00\x00\x00\x16r_\xe7\x1d\xc1P\x00\x00\x00\x00\x00\x00\x00\x00\x1b/\xa4\x13\x9bH\x84\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\xf5\x9f\x97\xcd]\xffP\x00\x00\x00\x00\x00\x00\x00\x00\x05\x1e\"4v\x8aQ\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d_\xf8=D\xd6" + "5\x10\x00\x00\x00\x00\x00\x00\x00\x00\x09\x1a\x0c\xfcz\x83Q@\x00\x00\x00\x00\x00\x00\x00\x00\x1b\xf6`\x9f\xf2\xd2\x90\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x1d\xfc.Vh\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15Wx\x90" + "e-\xd5\x90\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x8alTZx\xa1\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x18VP\x1d\xc2m\xd4\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x06\x9dl\xb7~\x87q\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x18gH\x8eM\xd1" + "7\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x0b" + "9]\xd3\xbe\x85R@\x00\x00\x00\x00\x00\x00\x00\x00\x1a\xfdp\xa3" + "6\xd6w\x10\xfd\xf6o\xc3\x06\xcd\xf0p\x19\x13\xd1\x27" + "5\xa8r@1\x86" + "c\x03\x06\xcd\x80\xd8\x01" + "bT\x94\xef\xed=P1\x83\xc3\x03\x06\xed\x80\x18\x1b\xbd]]\x8f\xb8Y\xa0" + "1\xf1\x83\x03\x06\xed\xf0\x18\x1auq\x03\x99\xedl\xe0" + "1\x81\x83\x03\x06\xdd\x80" + "0\x18\x9cU\x92\xdd" + "D\xe5\xb0" + "1\x83\xc3\x03\x06\xdd\x80`\x02K@\x9aU\x11\x04\xe0" + "1\x86" + "c\x03\x06\xcd\x80\xc0\x1d" + "1e\xc2\x9a" + "D\xa6@1\xf6" + "c\x03\xf6\xcd\xf0\xf8\x14\xf5tt U\x1e\x10\x00\x00\x00\x00\x00\x00MW228Ti\x00\x00\x1f+\x1d\xc8\x1dj~@\x00\x00\x00\x00\x00\x00\x00\x00\x00z\x88\xd7\xcb.?P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11-\xc4S{q\x90\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xc5quanu\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x10P\x1d\xc4]\xb4\x91\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x17Q\xbb\xf7\xc5\xb1\xff\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x17M\x13\xf1\x1a\x94\x85\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x17U\xc7I`U\xd3\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x10I\xbe\xaf&F\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xca\xc8\x93:b\x14\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" + "DI0060000Ti";
        private const string SLAVE_IMAGE_160x219      = "*@113MD002TiMW402Ti\x14\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00MW402Ti\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x03\xff\xf3?\xcf\xcc\xcc" + "3\x0c\xcc?\xc0<?\xff\x00\x00\x02@\x00\x03\xff\xf3?\xcf\xcc\xcc" + "3\x0c\xcc?\xc0<?\xff\x00\x00\x02@\x00\x03\x00" + "0<?\x03\x03\xf0\xf0?\x0c\xc3\x0c" + "0\x03\x00\x00\x02@\x00\x03\x00" + "0<?\x03\x03\xf0\xf0?\x0c\xc3\x0c" + "0\x03\x00\x00\x02@\x00\x03?0<\xf3\xcf\x00\xc3\x03\x0c\xc3<<3\xf3\x00\x00\x02@\x00\x03?0<\xf3\xcf\x00\xc3\x03\x0c\xc3<<3\xf3\x00\x00\x02@\x00\x03?3\x0c\xc0<3\x03\x03\x03\xf3\x00\xcc" + "3\xf3\x00\x00\x02@\x00\x03?3\x0c\xc0<3\x03\x03\x03\xf3\x00\xcc" + "3\xf3\x00\x00\x02@\x00\x03?0?\x0f\xc0\x0c\xff\xff\xcc\xc0<\x0c" + "3\xf3\x00\x00\x02@\x00\x03?0?\x0f\xc0\x0c\xff\xff\xcc\xc0<\x0c" + "3\xf3\x00\x00\x02@\x00\x03\x00" + "0\xc3\xc3\xcc\xf3\xf0?\xcf\xc3\x03" + "00\x03\x00MW402Ti\x00\x02@\x00\x03\x00" + "0\xc3\xc3\xcc\xf3\xf0?\xcf\xc3\x03" + "00\x03\x00\x00\x02@\x00\x03\xff\xf3" + "3333333333?\xff\x00\x00\x02@\x00\x03\xff\xf3" + "3333333333?\xff\x00\x00\x02@\x00\x00\x00\x00\x03\xfc\xff" + "30?\xfc" + "0<\xcc\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x03\xfc\xff" + "30?\xfc" + "0<\xcc\x00\x00\x00\x00\x02@\x00\x00" + "3\xf3?\xff\x03\xc0?\xf3\x0f\x03\x0c\xf3\xc0\xc3\x00\x00\x02@\x00\x00" + "3\xf3?\xff\x03\xc0?\xf3\x0f\x03\x0c\xf3\xc0\xc3\x00\x00\x02@\x00\x03" + "0\xc0?3\xff" + "03?30?\xc3\x0f" + "0\x00\x00\x02@\x00\x03" + "0\xc0?3\xff" + "03?30?\xc3\x0f" + "0\x00\x00\x02@\x00\x00\xc3<\xcc\xcc\xff\xfc\x00<\xc0" + "3<\xf0\x0c\x03\x00\x00\x02@\x00\x00\xc3<\xcc\xcc\xff\xfc\x00<\xc0" + "3<\xf0\x0c\x03\x00\x00\x02@\x00\x03\xf3\xc0" + "0\x00\xcf\xf0\x0c\x03\xff\x0c\xcc\xc3\xc3" + "0\x00\x00\x02@\x00\x03\xf3\xc0" + "0\x00\xcf\xf0\x0c\x03\xff\x0c\xcc\xc3\xc3" + "0\x00\x00\x02@\x00\x00\xc0<30\xf3\xcf<\xcf" + "0\x0c\xfc\xcf\xff" + "3\x00\x00\x02@\x00\x00\xc0<30\xf3\xcf<\xcf" + "0\x0c\xfc\xcf\xff" + "3\x00\x00\x02@\x00\x03\x00\xcc\xf0\xff\x0f\xf3\x03\xf3" + "3\x0f\xcf\xcc\xcc\xcc\x00\x00\x02@\x00\x03\x00\xcc\xf0\xff\x0f\xf3\x03\xf3" + "3\x0f\xcf\xcc\xcc\xcc\x00\x00\x02@\x00\x03\x0f\xff\xcc" + "0\xc3\x0c\x00\x0c\xc0\xcc\xfc\xcf\xff\xfc\x00\x00\x02@\x00\x03\x0f\xff\xcc" + "0\xc3\x0c\x00\x0c\xc0\xcc\xfc\xcf\xff\xfc\x00\x00\x02@\x00\x00\xc3\xcc\xc3\xfc\xff\xcf\xc3\x0c\xcc" + "00<<\xcf\x00MW402Ti\x00\x02@\x00\x00\xc3\xcc\xc3\xfc\xff\xcf\xc3\x0c\xcc" + "00<<\xcf\x00\x00\x02@\x00\x03\xfc" + "3\xff\x00\x03\xcf\xff\x0c?\x03\x03\xf3\x0c\xfc\x00\x00\x02@\x00\x03\xfc" + "3\xff\x00\x03\xcf\xff\x0c?\x03\x03\xf3\x0c\xfc\x00\x00\x02@\x00\x00\x0c\xc0\xff\x0f?\xf3?\xc3\xc3" + "00\xc3??\x00\x00\x02@\x00\x00\x0c\xc0\xff\x0f?\xf3?\xc3\xc3" + "00\xc3??\x00\x00\x02@\x00\x00\x0f\xfc<0\xff\x0c\x03\xcc\xf0" + "330<\x0f\x00\x00\x02@\x00\x00\x0f\xfc<0\xff\x0c\x03\xcc\xf0" + "330<\x0f\x00\x00\x02@\x00\x03\xf3\xc0\xf0\xfc\x0f\xcf\x0f\x0c\xff\xcf\xcc" + "3\xcc<\x00\x00\x02@\x00\x03\xf3\xc0\xf0\xfc\x0f\xcf\x0f\x0c\xff\xcf\xcc" + "3\xcc<\x00\x00\x02@\x00\x00\xc3<\xfc\x0f\xcf\xcf?\x0c" + "0\xff\xfc\x0f\xfc" + "3\x00\x00\x02@\x00\x00\xc3<\xfc\x0f\xcf\xcf?\x0c" + "0\xff\xfc\x0f\xfc" + "3\x00\x00\x02@\x00\x00\x03\x0c\xc3\x00\xfc\xff\x0c\xc3" + "3\xc0\xcf<\xcf" + "0\x00\x00\x02@\x00\x00\x03\x0c\xc3\x00\xfc\xff\x0c\xc3" + "3\xc0\xcf<\xcf" + "0\x00\x00\x02@\x00\x03\xcf\xff\xc3\x0c\xc3\x03\x00\xcc\xc0\xff\xfc?\xfc\x03\x00\x00\x02@\x00\x03\xcf\xff\xc3\x0c\xc3\x03\x00\xcc\xc0\xff\xfc?\xfc\x03\x00\x00\x02@\x00\x00\xc0\x00\xc0?\xfc<\xc3\x03\xcc" + "0\xc0\xcc" + "0<\x00\x00\x02@\x00\x00\xc0\x00\xc0?\xfc<\xc3\x03\xcc" + "0\xc0\xcc" + "0<\x00\x00\x02@\x00\x03<?\xff?\x0c" + "3\xff\xfc?\x03\xf3\xf0\x03" + "3\x00\x00\x02@\x00\x03<?\xff?\x0c" + "3\xff\xfc?\x03\xf3\xf0\x03" + "3\x00\x00\x02@\x00\x03\xcf\x0c\xff\xcc" + "0\x03\x0f\xc3\xcf" + "0\xc0\xc0" + "0\x00\x00MW402Ti\x00\x02@\x00\x03\xcf\x0c\xff\xcc" + "0\x03\x0f\xc3\xcf" + "0\xc0\xc0" + "0\x00\x00\x00\x02@\x00\x03\xcf\xff" + "3\xc3\xff\xc3?\xf0\xf3" + "3\xf3\xff\xff" + "3\x00\x00\x02@\x00\x03\xcf\xff" + "3\xc3\xff\xc3?\xf0\xf3" + "3\xf3\xff\xff" + "3\x00\x00\x02@\x00\x00" + "3\x03\xfc\x0c\x0c\x0f" + "0?<\xc0\xcc" + "3\x03\x00\x00\x00\x02@\x00\x00" + "3\x03\xfc\x0c\x0c\x0f" + "0?<\xc0\xcc" + "3\x03\x00\x00\x00\x02@\x00\x03\xf3" + "3\xff\xff\xc0\x0f\xf3" + "00\xf3<\x0f" + "3\x03\x00\x00\x02@\x00\x03\xf3" + "3\xff\xff\xc0\x0f\xf3" + "00\xf3<\x0f" + "3\x03\x00\x00\x02@\x00\x00\xc3\x03\xcc\x00\xf0\xff\xf0?\xcc\xc0\x0f" + "3\x03" + "0\x00\x00\x02@\x00\x00\xc3\x03\xcc\x00\xf0\xff\xf0?\xcc\xc0\x0f" + "3\x03" + "0\x00\x00\x02@\x00\x03\xcf\xff<<\x00\xc3\xff\xff\x0c\xf3\x0c?\xff\xc3\x00\x00\x02@\x00\x03\xcf\xff<<\x00\xc3\xff\xff\x0c\xf3\x0c?\xff\xc3\x00\x00\x02@\x00\x00\xf3\x03\xf3\xff\xf0\x0c\xfc" + "3<<\xc0\xc3\xcc\x00\x00\x00\x02@\x00\x00\xf3\x03\xf3\xff\xf0\x0c\xfc" + "3<<\xc0\xc3\xcc\x00\x00\x00\x02@\x00\x03" + "33??\xc0\xc3\x00<3\x0c\xf3\xf3" + "3\xc3\x00\x00\x02@\x00\x03" + "33??\xc0\xc3\x00<3\x0c\xf3\xf3" + "3\xc3\x00\x00\x02@\x00\x03\xff\xc0\xcc<\xf0" + "303\xcc?\xc0\xcc\x03\xcc\x00\x00\x02@\x00\x03\xff\xc0\xcc<\xf0" + "303\xcc?\xc0\xcc\x03\xcc\x00\x00\x02@\x00\x03\xc0" + "3<3\x00\x03\xf3\xf0\x0c<\xf3\xf3" + "0\xfc\x00\x00\x02@\x00\x03\xc0" + "3<3\x00\x03\xf3\xf0\x0c<\xf3\xf3" + "0\xfc\x00\x00\x02@\x00\x00<\xc3\xf3<\xf0\xcf??\xfc\xc0??\x03\xcf\x00MW402Ti\x00\x02@\x00\x00<\xc3\xf3<\xf0\xcf??\xfc\xc0??\x03\xcf\x00\x00\x02@\x00\x03\xc0<?0\xc0\xc0\xfc" + "0\xf3\xf3\x03\x0f?\xfc\x00\x00\x02@\x00\x03\xc0<?0\xc0\xc0\xfc" + "0\xf3\xf3\x03\x0f?\xfc\x00\x00\x02@\x00\x00\xcf\x0f\xc3" + "3\xf3\xf3\x0f\xcf\xfc\xc0" + "33\x0c" + "0\x00\x00\x02@\x00\x00\xcf\x0f\xc3" + "3\xf3\xf3\x0f\xcf\xfc\xc0" + "33\x0c" + "0\x00\x00\x02@\x00\x03\xcc\xff\xf3?\x00\xcc\x0f\x0f<\xf3<??\x03\x00\x00\x02@\x00\x03\xcc\xff\xf3?\x00\xcc\x0f\x0f<\xf3<??\x03\x00\x00\x02@\x00\x03\xc3\x03\x0f\xf3\x03\x0c?\x0f" + "3\xcc\xc0?\x0c" + "0\x00\x00\x02@\x00\x03\xc3\x03\x0f\xf3\x03\x0c?\x0f" + "3\xcc\xc0?\x0c" + "0\x00\x00\x02@\x00\x00\x03<\x0c" + "30\xc3" + "0\xfc\xff\xfc\xf3\x0f\xf3" + "3\x00\x00\x02@\x00\x00\x03<\x0c" + "30\xc3" + "0\xfc\xff\xfc\xf3\x0f\xf3" + "3\x00\x00\x02@\x00\x03\xcf\xcf\xf3" + "3\xf3" + "3\xf3\xc0\xff\xcf\xc0" + "3\xc3\xcc\x00\x00\x02@\x00\x03\xcf\xcf\xf3" + "3\xf3" + "3\xf3\xc0\xff\xcf\xc0" + "3\xc3\xcc\x00\x00\x02@\x00\x03\xcc?3?\x03\x00\x0f\xc3\xc3\xfc\xf3<\xf0\xfc\x00\x00\x02@\x00\x03\xcc?3?\x03\x00\x0f\xc3\xc3\xfc\xf3<\xf0\xfc\x00\x00\x02@\x00\x03\xc0\xc3\xf0" + "33\xc3\x0c\xf3\xf3" + "00\xfc" + "3\xcf\x00\x00\x02@\x00\x03\xc0\xc3\xf0" + "33\xc3\x0c\xf3\xf3" + "00\xfc" + "3\xcf\x00\x00\x02@\x00\x00\x0c" + "0\xcf" + "0\x00\xc3\xcc" + "33\x03\x03\x00" + "0\xfc\x00\x00\x02@\x00\x00\x0c" + "0\xcf" + "0\x00\xc3\xcc" + "33\x03\x03\x00" + "0\xfc\x00\x00\x02@\x00\x03\xf3\x0f\x03<3\xf0\x0c\xc3\xcc" + "00\xcc<0\x00MW402Ti\x00\x02@\x00\x03\xf3\x0f\x03<3\xf0\x0c\xc3\xcc" + "00\xcc<0\x00\x00\x02@\x00\x03" + "0\xff" + "3?0?0\x0c\x00" + "33\x03\xfc\x03\x00\x00\x02@\x00\x03" + "0\xff" + "3?0?0\x0c\x00" + "33\x03\xfc\x03\x00\x00\x02@\x00\x03\xff\x0c\xcf\x03\xf3\xf0\xc0\x03\xf3<\xcc?\xfc" + "0\x00\x00\x02@\x00\x03\xff\x0c\xcf\x03\xf3\xf0\xc0\x03\xf3<\xcc?\xfc" + "0\x00\x00\x02@\x00\x00\x00?\xcc\xc0\xc0\xf3?\xf0\xcf\x0c\xfc\x0f\xff" + "3\x00\x00\x02@\x00\x00\x00?\xcc\xc0\xc0\xf3?\xf0\xcf\x0c\xfc\x0f\xff" + "3\x00\x00\x02@\x00\x00\x00\x03\x03\x0c\xf3\xf0" + "03\x0f?\xcf?\x03\xc3\x00\x00\x02@\x00\x00\x00\x03\x03\x0c\xf3\xf0" + "03\x0f?\xcf?\x03\xc3\x00\x00\x02@\x00\x03\xff\xf0" + "3?\x03?3<\x03<\xfc?3\xff\x00\x00\x02@\x00\x03\xff\xf0" + "3?\x03?3<\x03<\xfc?3\xff\x00\x00\x02@\x00\x03\x00" + "3\x00\x03\xf3\xf0" + "03\xf3\xcf" + "0\xc3\x03\xcc\x00\x00\x02@\x00\x03\x00" + "3\x00\x03\xf3\xf0" + "03\xf3\xcf" + "0\xc3\x03\xcc\x00\x00\x02@\x00\x03?3\x03\xcf\xcf\xff?\xf0" + "3\xcf\x03\xff\xff\xff\x00\x00\x02@\x00\x03?3\x03\xcf\xcf\xff?\xf0" + "3\xcf\x03\xff\xff\xff\x00\x00\x02@\x00\x03?0\xf3\x03\x0f\xff\x03\x03\xcc\xc3" + "0\xc0" + "3\xcc\x00\x00\x02@\x00\x03?0\xf3\x03\x0f\xff\x03\x03\xcc\xc3" + "0\xc0" + "3\xcc\x00\x00\x02@\x00\x03?33\xf0?0\xc3<\x00" + "33\xf3\x0f\xf3\x00\x00\x02@\x00\x03?33\xf0?0\xc3<\x00" + "33\xf3\x0f\xf3\x00\x00\x02@\x00\x03\x00" + "0\xc3\xcf\xfc\xcc\xff?\xff\x0c<0<\xcc\x00MW402Ti\x00\x02@\x00\x03\x00" + "0\xc3\xcf\xfc\xcc\xff?\xff\x0c<0<\xcc\x00\x00\x02@\x00\x03\xff\xf0\xcc\xf0\xc0\xc3\x0f\x0f\xcc<\x0c\x03" + "0\xff\x00\x00\x02@\x00\x03\xff\xf0\xcc\xf0\xc0\xc3\x0f\x0f\xcc<\x0c\x03" + "0\xff\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00MW402Ti\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02O\x81\xf9\xcf\xbf\xc0\x00\xf1\xcf\xbf\xc0\x00\xf0\xff\x07\xfe\xffy\xff\xfa" + "F\x00`\xc3\x18\xc0\x01\x98\xc3\x18\xc0\x01\x98" + "c\x06" + "fc0\xd9\x9a" + "F\x00`\xe3\x18\x00\x03\x0c\xe3\x18\x00\x03\x0c`\x00``\x19\x81\x82" + "F\x00`\xf3\x1b\x00\x03\x0c\xf3\x1b\x00\x03\x0cl\x00`l\x0f\x01\x82" + "F\x00`\xf3\x1f\x00\x03\x0c\xf3\x1f\x00\x03\x0c|\x00`|\x06\x01\x82" + "F\x00`\xdb\x1b\x00\x03\x0c\xdb\x1b\x00\x03\x0cl\x00`l\x06\x01\x82" + "F\x00`\xcf\x18\x00\x03\x0c\xcf\x18\x00\x03\x0c`\x00``\x0f\x01\x82" + "F\x00`\xcf\x18\x00\x03\x0c\xcf\x18\x00\x03\x0c`\x00``\x19\x81\x82" + "F0`\xc7\x18\xc0\x01\x98\xc7\x18\xc0\x01\x98`\x00`c0\xc1\x82O\xf1\xf9\xf3?\xc0\x00\xf1\xf3?\xc0\x00\xf0\xf8\x01\xf8\xffy\xe7\xe2@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00MW402Ti\x00\x02O\x81\xf9\xcf\xbf\xc0\x07\xff\xc3\x8f\x00\x00\xf0\xff\x07\xfe\xffy\xff\xfa" + "F\x00`\xc3\x18\xc0\x06g\x81\x99\x80\x01\x98" + "c\x06" + "fc0\xd9\x9a" + "F\x00`\xe3\x18\x00\x00" + "a\x99\xb0\xc0\x03\x0c`\x00``\x19\x81\x82" + "F\x00`\xf3\x1b\x00\x00" + "a\x99\xb0\xc0\x03\x0cl\x00`l\x0f\x01\x82" + "F\x00`\xf3\x1f\x00\x00`\xff" + "0\xc0\x03\x0c|\x00`|\x06\x01\x82" + "F\x00`\xdb\x1b\x00\x00`\xff" + "0\xc0\x03\x0cl\x00`l\x06\x01\x82" + "F\x00`\xcf\x18\x00\x00`\xff" + "0\xc0\x03\x0c`\x00``\x0f\x01\x82" + "F\x00`\xcf\x18\x00\x00`f0\xc0\x03\x0c`\x00``\x19\x81\x82" + "F0`\xc7\x18\xc0\x00`f\x19\x80\x01\x98`\x00`c0\xc1\x82O\xf1\xf9\xf3?\xc0\x01\xf8" + "f\x0f\x00\x00\xf0\xf8\x01\xf8\xffy\xe7\xe2@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00MW384Ti\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" + "DI0060000Ti";
        private const string SLAVE_IMAGE_160x240      = "*@109MD002TiMW767Ti\x14\xf0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x1f\xff\x87\x98\x18\x00\x01\x9e\x00\x1e" + "f\x1f\x87\xff\xe0\x00\x00\x05\xa0\x00\x1f\xff\x87\x98\x18\x00\x01\x9e\x00\x1e" + "f\x1f\x87\xff\xe0\x00\x00\x05\xa0\x00\x18\x01\x87\x98\x1f\x86" + "a\x80~\x06\x00\x19\x86\x00`\x00\x00\x05\xa0\x00\x18\x01\x87\x98\x1f\x86" + "a\x80~\x06\x00\x19\x86\x00`\x00\x00\x05\xa0\x00\x19\xf9\x9f\xe0~\x06\x00x\x07\x87\xe6\x86~`\x00\x00\x05\xa0\x00\x19\xf9\x9f\xe0~\x06\x00x\x07\x87\xe6\x86~`\x00\x00\x05\xa0\x00\x19\xf9\x9f\x99\x9e\x1e\x07\xe7\x87\x81\x9f\xe1\x86~`\x00\x00\x05\xa0\x00\x19\xf9\x9f\x99\x9e\x1e\x07\xe7\x87\x81\x9f\xe1\x86~`\x00\x00\x05\xa0\x00\x19\xf9\x86\x18x\x07\xe1\xff\xf8\x19\xff\x99\x86~`\x00\x00\x05\xa0\x00\x19\xf9\x86\x18x\x07\xe1\xff\xf8\x19\xff\x99\x86~`\x00\x00\x05\xa0\x00\x18\x01\x87\x80\x1e\x00\x07\x81\xe1\x81\x87\xfe\x06\x00`\x00\x00\x05\xa0\x00\x18\x01\x87\x80\x1e\x00\x07\x81\xe1\x81\x87\xfe\x06\x00`\x00\x00\x05\xa0\x00\x1f\xff\x99\x99\x99\x99\x99\x99\xe6" + "fffg\xff\xe0\x00\x00\x05\xa0\x00\x1f\xff\x99\x99\x99\x99\x99\x99\xe6" + "fffg\xff\xe0\x00\x00\x05\xa0\x00\x00\x00\x00" + "f\x00g\xff\x81\xf8" + "a\x99\xe0`\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00" + "f\x00g\xff\x81\xf8" + "a\x99\xe0`\x00\x00\x00\x00\x05\xa0\x00\x00y\xe1\xf8\x1f\xe0" + "a\xff\xe7\xff\xe0" + "f`\x1e\x00\x00\x00\x05\xa0\x00\x00y\xe1\xf8\x1f\xe0" + "a\xff\xe7\xff\xe0" + "f`\x1e\x00\x00\x00\x05\xa0\x00\x06x\x86x\x06\x06" + "f\x99\xf8\x07\x9ey\xe0\x00\x00\x05\xa0\x00\x06x\x86x\x06\x06" + "f\x99\xf8\x07\x9ey\xe0\x00\x00\x05\xa0\x00\x06MW767Tig\xe7\x86" + "fx\x18\x99\x87\x9f\x81\x98\x18`\x00\x00\x05\xa0\x00\x06g\xe7\x86" + "fx\x18\x99\x87\x9f\x81\x98\x18`\x00\x00\x05\xa0\x00\x01\xe6`\x1e\x1e\x18\x1e\x19\x81\x9e~\x06\x01\x81\x80\x00\x00\x05\xa0\x00\x01\xe6`\x1e\x1e\x18\x1e\x19\x81\x9e~\x06\x01\x81\x80\x00\x00\x05\xa0\x00\x00g\x86\xe6x\x1f\x80\x98\x06\x00" + "f\xe0\x00\x00\x05\xa0\x00\x00g\x86\xe6x\x1f\x80\x98\x06\x00" + "f\xe0\x00\x00\x05\xa0\x00\x01\xe0x~\x18" + "a\xe1\xf8\x86g\x80~\x07\xe0\x00\x00\x05\xa0\x00\x01\xe0x~\x18" + "a\xe1\xf8\x86g\x80~\x07\xe0\x00\x00\x05\xa0\x00\x07\x9f\x80" + "fffg\xe0`\x06\x1e" + "a\xe0~`\x00\x00\x05\xa0\x00\x07\x9f\x80" + "fffg\xe0`\x06\x1e" + "a\xe0~`\x00\x00\x05\xa0\x00\x1f\xe0\x19\xe0\x18\x01\x81\xe7\xe6y\xf9\xe6xf\x00\x00\x00\x05\xa0\x00\x1f\xe0\x19\xe0\x18\x01\x81\xe7\xe6y\xf9\xe6xf\x00\x00\x00\x05\xa0\x00\x07\x9f\x98\x18~\x19\x9f\x86\x18" + "a\x98g\xe0g\x80\x00\x00\x05\xa0\x00\x07\x9f\x98\x18~\x19\x9f\x86\x18" + "a\x98g\xe0g\x80\x00\x00\x05\xa0\x00\x06\x1e`f\x00\x18\x07\x87\xe6\x1f\xe1\x86\x1e\x00`\x00\x00\x05\xa0\x00\x06\x1e`f\x00\x18\x07\x87\xe6\x1f\xe1\x86\x1e\x00`\x00\x00\x05\xa0\x00\x1e\x19\x87\x87\xe1\x9e\x06x\x07\x9f\xff\xf9\x9e\x18`\x00\x00\x05\xa0\x00\x1e\x19\x87\x87\xe1\x9e\x06x\x07\x9f\xff\xf9\x9e\x18`\x00\x00\x05\xa0\x00\x00`\x19\xfe\x07\xe0\x01\x9f\xe6\x1eg\xff\x9e\x18\x00\x00\x00\x05\xa0\x00\x00`\x19\xfe\x07\xe0\x01\x9f\xe6\x1eg\xff\x9e\x18\x00\x00\x00\x05\xa0\x00\x1f\xe1\x99\xe7\x9e\x18~\x18~\x01\xfey\xe0\x07\x80\x00\x00\x05\xa0\x00\x1f\xe1\x99\xe7\x9e\x18~\x18~\x01\xfey\xe0\x07\x80\x00\x00\x05\xa0\x00\x01\xf8\x19\xff\xf8x\x07\x99\x99\x87\x86\x18" + "f\x19\xe0\x00\x00\x05\xa0\x00\x01\xf8\x19\xff\xf8x\x07\x99\x99\x87\x86\x18" + "f\x19\xe0\x00\x00\x05\xa0\x00\x1e\x1f\xf9\x80\x18y\xf8x\x07\x9e\x07\x98~x`\x00\x00\x05\xa0\x00\x1e\x1f\xf9\x80\x18y\xf8x\x07\x9e\x07\x98~x`\x00\x00\x05\xa0\x00\x18x\x19\xe1\x86\x1f\xf8g\xe7\x9f\xff\x87\xff\xe0\x00\x00\x00\x05\xa0\x00\x18x\x19\xe1\x86\x1f\xf8g\xe7\x9f\xff\x87\xff\xe0\x00\x00\x00\x05\xa0\x00\x1f\x87\x99\xff\x9e\xf9\x9e\x1f\x99\xe7\xe6\x19\xff\xe0\x00\x00\x05\xa0\x00\x1f\x87\x99\xff\x9e\xf9\x9e\x1f\x99\xe7\xe6\x19\xff\xe0\x00\x00\x05\xa0\x00\x07\x80y\xe1\x86~a\x9e\x01\x81\x86" + "a\xe1\x80`\x00\x00\x05\xa0\x00\x07\x80y\xe1\x86~a\x9e\x01\x81\x86" + "a\xe1\x80`\x00\x00\x05\xa0\x00\x19\x9f\xff\xe1\xff\x81\x9f\xff\xe7\xf9\xff\x87\xff\xe7\x80\x00\x00\x05\xa0\x00\x19\x9f\xff\xe1\xff\x81\x9f\xff\xe7\xf9\xff\x87\xff\xe7\x80\x00\x00\x05\xa0\x00\x1ex\x18\x06\x1f\x9e\x07\x81\x98g\xfey\xe0\xe0\x00\x00\x05\xa0\x00\x1ex\x18\x06\x1f\x9e\x07\x81\x98g\xfey\xe0\xe0\x00\x00\x05\xa0\x00\x1f\xf9\x98\x18\x00\x01\x9f\x99\x98\x1f\x81\x9e" + "fx`\x00\x00\x05\xa0\x00\x1f\xf9\x98\x18\x00\x01\x9f\x99\x98\x1f\x81\x9e" + "fx`\x00\x00\x05\xa0\x00\x18\x18\x19\xf8~`MW767Tia\x81\xe7\x81\xe6x`g\x80\x00\x00\x05\xa0\x00\x18\x18\x19\xf8~`a\x81\xe7\x81\xe6x`g\x80\x00\x00\x05\xa0\x00\x18\x1f\xff\x87\x86`y\xff\xf8g\xe0\x1e\xe7\xe0\x00\x00\x05\xa0\x00\x18\x1f\xff\x87\x86`y\xff\xf8g\xe0\x1e\xe7\xe0\x00\x00\x05\xa0\x00\x1ey\xff\xfe\x1ex\x1f\xe6~~\x1e\x06y\xe1\x80\x00\x00\x05\xa0\x00\x1ey\xff\xfe\x1ex\x1f\xe6~~\x1e\x06y\xe1\x80\x00\x00\x05\xa0\x00\x00\x00\x19\x9e\x18~f~\x06x\x07\x86\x86`\x00\x00\x05\xa0\x00\x00\x00\x19\x9e\x18~f~\x06x\x07\x86\x86`\x00\x00\x05\xa0\x00\x1e\x1f\xfe\x01\xe6\x07\xff\xe7\x9e\x06~a\xe7\xe7\x80\x00\x00\x05\xa0\x00\x1e\x1f\xfe\x01\xe6\x07\xff\xe7\x9e\x06~a\xe7\xe7\x80\x00\x00\x05\xa0\x00\x1f\x9e`\x07\x9e" + "a\xe7\x86y\xe1\xe0y\x99\x9e`\x00\x00\x05\xa0\x00\x1f\x9e`\x07\x9e" + "a\xe7\x86y\xe1\xe0y\x99\x9e`\x00\x00\x05\xa0\x00\x18g\x87\x9f\xf8`y\x9f\x87\xe7\xf9\xf8~f\x00\x00\x00\x05\xa0\x00\x18g\x87\x9f\xf8`y\x9f\x87\xe7\xf9\xf8~f\x00\x00\x00\x05\xa0\x00\x1f\x9e``\x00\x01\xe7\xf9\x80\x98\x1f\x86\x18`\x00\x00\x05\xa0\x00\x1f\x9e``\x00\x01\xe7\xf9\x80\x98\x1f\x86\x18`\x00\x00\x05\xa0\x00\x19\x87\x80\x1e\x1ex\x00x\x01\x81\xe6\xf8" + "a\x80\x00\x00\x05\xa0\x00\x19\x87\x80\x1e\x1ex\x00x\x01\x81\xe6\xf8" + "a\x80\x00\x00\x05\xa0\x00\x01\xe6" + "a\x80\x1eg\xf9\xe7\x99\x86g\xf8\x1ey\xe0\x00\x00\x05\xa0\x00\x01\xe6" + "a\x80\x1eg\xf9\xe7\x99\x86g\xf8\x1ey\xe0\x00\x00\x05\xa0\x00\x00g\xe7\x81\xe6\x01\x81\xe1\x86~f~\x9e`\x00\x00\x05\xa0\x00\x00g\xe7\x81\xe6\x01\x81\xe1\x86~f~\x9e`\x00\x00\x05\xa0\x00\x00\x06\x18\x07\xfe~\x06\x81\x80\x1f\x98\x01\x9e\x00\x00\x00\x05\xa0\x00\x00\x06\x18\x07\xfe~\x06\x81\x80\x1f\x98\x01\x9e\x00\x00\x00\x05\xa0\x00\x18\x07\x99\xff\x99\xfe\x19\x80\x19\xe6\x07\xfe\x07\x86\x00\x00\x00\x05\xa0\x00\x18\x07\x99\xff\x99\xfe\x19\x80\x19\xe6\x07\xfe\x07\x86\x00\x00\x00\x05\xa0\x00\x07\xe0\x06x`\x00y\xf8g\x81\x98" + "fa\xe7\x80\x00\x00\x05\xa0\x00\x07\xe0\x06x`\x00y\xf8g\x81\x98" + "fa\xe7\x80\x00\x00\x05\xa0\x00\x07\x81\xf9\xfe" + "a\xf8\x19\x81\xfe\xe1\x98\x18\x1e`\x00\x00\x05\xa0\x00\x07\x81\xf9\xfe" + "a\xf8\x19\x81\xfe\xe1\x98\x18\x1e`\x00\x00\x05\xa0\x00\x00" + "f\x07\xe6\x18`\x99\x86y\xf9\xe6g\xf9\xe0\x00\x00\x05\xa0\x00\x00" + "f\x07\xe6\x18`\x99\x86y\xf9\xe6g\xf9\xe0\x00\x00\x05\xa0\x00\x19\x87\xfey\x87\x86\x19\xfe\x87\x9e\xff\xf8`\x00\x00\x05\xa0\x00\x19\x87\xfey\x87\x86\x19\xfe\x87\x9e\xff\xf8`\x00\x00\x05\xa0\x00\x1f\xf8\x01\xe6" + "fx\x18y\xe0\x1e~\x19\x87\xe1\x80\x00\x00\x05\xa0\x00\x1f\xf8\x01\xe6" + "fx\x18y\xe0\x1e~\x19\x87\xe1\x80\x00\x00\x05\xa0\x00\x00\x01\x98\x00`a\xff\xff\x80x\x06\x18\xff\xe0\x00\x00\x05\xa0\x00\x00\x01\x98\x00`a\xff\xff\x80x\x06\x18\xff\xe0\x00\x00\x05\xa0\x00\x00\x00\x1e" + "a\x80\x01\xf9\x81\x98\x00gMW767Ti\x98`g\x80\x00\x00\x05\xa0\x00\x00\x00\x1e" + "a\x80\x01\xf9\x81\x98\x00g\x98`g\x80\x00\x00\x05\xa0\x00\x1f\xff\x9f\x9e\x18g\xff\x99\xf8x\x1ey\xe6~\x00\x00\x00\x05\xa0\x00\x1f\xff\x9f\x9e\x18g\xff\x99\xf8x\x1ey\xe6~\x00\x00\x00\x05\xa0\x00\x18\x01\x87\xff\xe0`\x81\x81\x9f\x99\xe7\xe0" + "f`\x00\x00\x05\xa0\x00\x18\x01\x87\xff\xe0`\x81\x81\x9f\x99\xe7\xe0" + "f`\x00\x00\x05\xa0\x00\x19\xf9\x9f\xe6\x00`\x19\xff\x99\xe0\x18`\xe6`\x00\x00\x05\xa0\x00\x19\xf9\x9f\xe6\x00`\x19\xff\x99\xe0\x18`\xe6`\x00\x00\x05\xa0\x00\x19\xf9\x98" + "fa\x80" + "fa\xe7\xff\x81\x86\x9e\x00\x00\x00\x05\xa0\x00\x19\xf9\x98" + "fa\x80" + "fa\xe7\xff\x81\x86\x9e\x00\x00\x00\x05\xa0\x00\x19\xf9\x87\x99\xe7\xff\xe0\x99\x86\xe7\xf8g\xe0\x00\x00\x05\xa0\x00\x19\xf9\x87\x99\xe7\xff\xe0\x99\x86\xe7\xf8g\xe0\x00\x00\x05\xa0\x00\x18\x01\x80\x01\x98~\x1e\x1e\x07\xf8\x19\xff\xe0\x07\xe0\x00\x00\x05\xa0\x00\x18\x01\x80\x01\x98~\x1e\x1e\x07\xf8\x19\xff\xe0\x07\xe0\x00\x00\x05\xa0\x00\x1f\xff\x80y\xe6\x1e\x1f\x98\x00x\x00xy\x9e\x00\x00\x00\x05\xa0\x00\x1f\xff\x80y\xe6\x1e\x1f\x98\x00x\x00xy\x9e\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x07\xff\x9f\xfc\xe0w\xff\x80`\x06" + "0\x0c\xf0\x00`\x00\x00\x05\xa0\x07\xff\x9f\xfcp\xe7\xff\x80`\x06" + "8\x0c\xf0\x00`\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06<\x0c`\x00\x01\xe0\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06<\x0c`\x00\x03\xe0\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06" + "6\x0c`\x00\x06`\x00\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "3\x0c`\x00\x00`\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x06\x00" + "0\x00`\x06" + "3\x0c\xe0\x00`\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x0f\x00" + "0\x00`\x06" + "1\x8c\xe0\x00`\x00MW767Ti\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "0\xcc`\x00\x00`\x00\x00\x05\xa0\x00" + "0\x18\x00\x1b\x80" + "0\x00`\x06" + "0\xcc`\x00\x00`\x00\x00\x05\xa0\x00" + "0\x18\x00" + "9\xc0" + "0\x00`\x06" + "0l`\x00\x00`\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06" + "0<`\x00\x00`\x00\x00\x05\xa0\x00" + "0\x18\x00``0\x00`\x06" + "0<`\x00\x00`\x00\x00\x05\xa0\x00" + "0\x1f\xfc\xe0p0\x00\xc6" + "0\x1c\xf0\x00`\x00\x00\x05\xa0\x00" + "0\x1f\xfd\xc0" + "80\x00\xc6" + "0\x0c\xf0\x00`\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x07\xff\x9f\xfc\xe0w\xff\x80`\x06" + "0\x0c\xf0\x03\xf0\x00\x00\x05\xa0\x07\xff\x9f\xfcp\xe7\xff\x80`\x06" + "8\x0c\xf0\x07\xf8\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06<\x0c`\x00\x0e\x1c\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06<\x0c`\x00\x0c\x0c\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06" + "6\x0c`\x00\x00\x0c\x00\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "3\x0c`\x00\x00\x0c\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x06\x00" + "0\x00`\x06" + "3\x0c\xe0\x00\x18\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x0f\x00" + "0\x00`\x06" + "1\x8c\xe0\x00\x18\x00\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "0\xcc`\x00\x00" + "0\x00\x00\x05\xa0\x00" + "0\x18\x00\x1b\x80" + "0\x00`\x06" + "0\xcc`\x00\x00\xe0\x00\x00\x05\xa0\x00" + "0\x18\x00" + "9\xc0" + "0\x00`\x06" + "0l`\x00\x01\xc0\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06" + "0<`\x00\x03\x00\x00\x00\x05\xa0\x00" + "0\x18\x00``0\x00`\x06" + "0<`\x00\x06\x00\x00\x00\x05\xa0\x00" + "0\x1f\xfc\xe0p0\x00\xc6" + "0\x1c\xf0\x0f\xfc\x00\x00\x05\xa0\x00" + "0\x1f\xfd\xc0" + "80\x00\xc6" + "0\x0c\xf0\x0f\xfc\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00MW767Ti\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x07\xff\x9f\xfc\xe0w\xff\x80`\x06" + "0\x0c\xf0\x03\xe0\x00\x00\x05\xa0\x07\xff\x9f\xfcp\xe7\xff\x80`\x06" + "8\x0c\xf0\x07\xf0\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06<\x0c`\x00\x0e" + "8\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06<\x0c`\x00\x0c\x18\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06" + "6\x0c`\x00\x00\x18\x00\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "3\x0c`\x00\x00" + "0\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x06\x00" + "0\x00`\x06" + "3\x0c\xe0\x00\xe0\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x0f\x00" + "0\x00`\x06" + "1\x8c\xe0\x00\xf8\x00\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "0\xcc`\x00\x00\x1c\x00\x00\x05\xa0\x00" + "0\x18\x00\x1b\x80" + "0\x00`\x06" + "0\xcc`\x00\x00\x0c\x00\x00\x05\xa0\x00" + "0\x18\x00" + "9\xc0" + "0\x00`\x06" + "0l`\x00\x00\x0c\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06" + "0<`\x00\x0c\x0c\x00\x00\x05\xa0\x00" + "0\x18\x00``0\x00`\x06" + "0<`\x00\x0e\x18\x00\x00\x05\xa0\x00" + "0\x1f\xfc\xe0p0\x00\xc6" + "0\x1c\xf0\x07\xf8\x00\x00\x05\xa0\x00" + "0\x1f\xfd\xc0" + "80\x00\xc6" + "0\x0c\xf0\x03\xe0\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x07\xff\x9f\xfc\xe0w\xff\x80`\x06" + "0\x0c\xf0\x00\x10\x00\x00\x05\xa0\x07\xff\x9f\xfcp\xe7\xff\x80`\x06" + "8\x0c\xf0\x00" + "0\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06<\x0c`\x00\x00p\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06<\x0c`\x00\x00\xf0\x00\x00\x05\xa0\x00" + "0\x18\x00\x19\x80" + "0\x00`\x06" + "6\x0c`\x00\x01\xb0\x00\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "3\x0c`\x00\x01\xb0\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x06\x00" + "0\x00`\x06" + "3\x0c\xe0\x03" + "0\x00\x00\x05\xa0\x00" + "0\x1f\xf8\x0f\x00" + "0\x00`\x06" + "1\x8c\xe0\x06" + "0\x00\x00\x05\xa0\x00" + "0\x18\x00\x0f\x00" + "0\x00`\x06" + "0\xcc`\x00\x0c" + "0\x00\x00\x05\xa0\x00" + "0\x18\x00\x1b\x80" + "0\x00`\x06" + "0\xcc`\x00\x0f\xfc\x00\x00\x05\xa0\x00" + "0\x18\x00" + "9\xc0" + "0\x00`\x06" + "0l`\x00\x0f\xfc\x00\x00\x05\xa0\x00" + "0\x18\x00" + "0\xc0" + "0\x00`\x06" + "0<`\x00\x00" + "0\x00\x00\x05\xa0\x00" + "0\x18\x00``0MW214Ti\x00`\x06" + "0<`\x00\x00" + "0\x00\x00\x05\xa0\x00" + "0\x1f\xfc\xe0p0\x00\xc6" + "0\x1c\xf0\x00" + "0\x00\x00\x05\xa0\x00" + "0\x1f\xfd\xc0" + "80\x00\xc6" + "0\x0c\xf0\x00" + "0\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xbf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" + "DI0060000Ti";
        private const string SLAVE_IMAGE_120x160      = "*@111MD002TiMW004Ti\x0F\xA0MW197Ti\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1F\xFF\x80\x18\x1F\x86\x60\x06\x1E\x7F\xF9\xE1\xE1\xFF\xF8\x1F\xFF\x80\x18\x1F\x86\x60\x06\x1E\x7F\xF9\xE1\xE1\xFF\xF8\x18\x01\x99\xE7\xF9\xE1\x86\x61\xF8\x18\x1F\x86\x61\x80\x18\x18\x01\x99\xE7\xF9\xE1\x86\x61\xF8\x18\x1F\x86\x61\x80\x18\x19\xF9\x80\x61\x9F\x87\xE7\x86\x06\x7F\xE1\x99\xE1\x9F\x98\x19\xF9\x80\x61\x9F\x87\xE7\x86\x06\x7F\xE1\x99\xE1\x9F\x98\x19\xF9\x98\x67\xE1\xE1\x99\xE0\x78\x19\x9F\xE0\x61\x9F\x98\x19\xF9\x98\x67\xE1\xE1\x99\xE0\x78\x19\x9F\xE0\x61\x9F\x98\x19\xF9\x80\x78\x1F\x86\x67\xFF\x9E\x7F\xF9\xFE\x61\x9F\x98\x19\xF9\x80\x78\x1F\x86\x67\xFF\x9E\x7F\xF9\xFE\x61\x9F\x98\x18\x01\x9E\x67\xF9\xE1\x87\x81\xF8\x18\x1F\x87\x81\x80\x18MW317Ti\x18\x01\x9E\x67\xF9\xE1\x87\x81\xF8\x18\x1F\x87\x81\x80\x18\x1F\xFF\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\xFF\xF8\x1F\xFF\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\x99\xFF\xF8\x00\x00\x07\x99\x9F\x87\xE1\x81\x81\xF8\x66\x66\x60\x00\x00\x00\x00\x07\x99\x9F\x87\xE1\x81\x81\xF8\x66\x66\x60\x00\x00\x1F\xF9\xFE\x1F\x81\x81\xF9\xFF\xFF\x9E\x18\x00\x1E\x66\x60\x1F\xF9\xFE\x1F\x81\x81\xF9\xFF\xFF\x9E\x18\x00\x1E\x66\x60\x07\xF8\x1F\x80\x67\xFE\x1F\x86\x19\xF8\x7E\x66\x60\x00\x00\x07\xF8\x1F\x80\x67\xFE\x1F\x86\x19\xF8\x7E\x66\x60\x00\x00\x07\xF9\x87\xF8\x06\x1E\x79\xE1\xFE\x1E\x19\x80\x06\x61\xF8\x07\xF9\x87\xF8\x06\x1E\x79\xE1\xFE\x1E\x19\x80\x06\x61\xF8\x06\x1E\x79\x9E\x60\x78\x1F\x81\xE1\x98\x06\x00\x60\x7F\x98\x06\x1E\x79\x9E\x60\x78\x1F\x81\xE1\x98\x06\x00\x60\x7F\x98\x06\x19\x99\xE0\x06\x06\x78\x67\x87\xE6\x66\x7F\x86\x66\x78\x06\x19\x99\xE0\x06\x06\x78\x67\x87\xE6\x66\x7F\x86\x66\x78\x00\x66\x79\x9E\x61\xF8\x1F\x81\xE1\x80\x07\x98\x78\x7E\x60\x00\x66\x79\x9E\x61\xF8\x1F\x81\xE1\x80\x07\x98\x78\x7E\x60\x1E\x1F\xFE\x00\x06\x1E\x79\xE7\x86\x66\x60\x79\xFE\x78\x00\x1E\x1F\xFE\x00\x06\x1E\x79\xE7\x86\x66\x60\x79\xFE\x78\x00\x01\x86\x60\x7E\x60\x78\x1F\x81\xE1\x98\x06\x06\x7F\x86\x60\x01\x86\x60\x7E\x60\x78\x1F\x81\xE1\x98\x06\x06\x7F\x86\x60MW317Ti\x01\xFF\xE1\xF8\x06\x06\x78\x67\x87\xE6\x60\x78\x19\xE1\x80\x01\xFF\xE1\xF8\x06\x06\x78\x67\x87\xE6\x60\x78\x19\xE1\x80\x00\x7E\x60\x1E\x61\xF8\x1F\x81\xE1\x80\x06\x1E\x67\x86\x60\x00\x7E\x60\x1E\x61\xF8\x1F\x81\xE1\x80\x06\x1E\x67\x86\x60\x19\xF9\x80\x1F\x86\x1E\x79\xE7\x86\x66\x61\xF8\x00\x60\x00\x19\xF9\x80\x1F\x86\x1E\x79\xE7\x86\x66\x61\xF8\x00\x60\x00\x18\x66\x01\xF9\xE0\x78\x1F\xE1\xE1\x98\x06\x1E\x67\xE6\x60\x18\x66\x01\xF9\xE0\x78\x1F\xE1\xE1\x98\x06\x1E\x67\xE6\x60\x1E\x07\xE0\x67\x86\x06\x78\x1F\x87\xE6\x60\x60\x7F\x99\x80\x1E\x07\xE0\x67\x86\x06\x78\x1F\x87\xE6\x60\x60\x7F\x99\x80\x06\x00\x01\x80\x61\xF8\x18\x79\xE1\x80\x06\x1E\x18\x79\x98\x06\x00\x01\x80\x61\xF8\x18\x79\xE1\x80\x06\x1E\x18\x79\x98\x18\x1F\xF8\x67\x86\x1E\x7E\x1F\x86\x66\x61\xF8\x79\x9F\xE0\x18\x1F\xF8\x67\x86\x1E\x7E\x1F\x86\x66\x61\xF8\x79\x9F\xE0\x01\x80\x07\x80\x60\x78\x18\x61\xE6\x1F\x81\x81\x9F\xE1\x80\x01\x80\x07\x80\x60\x78\x18\x61\xE6\x1F\x81\x81\x9F\xE1\x80\x19\x81\x98\x79\xE6\x66\x1E\x1F\x80\x61\xE7\xFF\xF9\x9F\xE0\x19\x81\x98\x79\xE6\x66\x1E\x1F\x80\x61\xE7\xFF\xF9\x9F\xE0\x01\x9E\x78\x00\x19\x80\x60\x79\xE6\x07\x81\x99\x9F\xFF\xE0\x01\x9E\x78\x00\x19\x80\x60\x79\xE6\x07\x81\x99\x9F\xFF\xE0\x00\x1F\xFF\x81\xF9\xE1\x81\xFF\x80\x60\x67\xFE\x7F\xF9\x80MW317Ti\x00\x1F\xFF\x81\xF9\xE1\x81\xFF\x80\x60\x67\xFE\x7F\xF9\x80\x07\xF8\x19\xE6\x1F\x87\xE7\x81\x86\x7F\xE6\x60\x18\x1F\xE0\x07\xF8\x19\xE6\x1F\x87\xE7\x81\x86\x7F\xE6\x60\x18\x1F\xE0\x1E\x79\x99\xF8\x61\xE1\x99\x99\xF8\x19\x9F\x86\x19\x9E\x00\x1E\x79\x99\xF8\x61\xE1\x99\x99\xF8\x19\x9F\x86\x19\x9E\x00\x18\x78\x18\x1F\x9F\x86\x61\x81\x9E\x7F\xF9\xE0\x18\x19\x80\x18\x78\x18\x1F\x9F\x86\x61\x81\x9E\x7F\xF9\xE0\x18\x19\x80\x07\x9F\xF9\xF8\x79\xE1\x81\xFF\xF8\x18\x19\x81\x9F\xFF\xF8\x07\x9F\xF9\xF8\x79\xE1\x81\xFF\xF8\x18\x19\x81\x9F\xFF\xF8\x07\xF8\x66\x06\x1F\x87\xE1\x9F\x86\x7F\xE1\xE1\xE0\x19\x98\x07\xF8\x66\x06\x1F\x87\xE1\x9F\x86\x7F\xE1\xE1\xE0\x19\x98\x00\x7F\x80\x60\x61\xE1\x98\x66\x78\x19\x9F\x87\x87\x9F\xF8\x00\x7F\x80\x60\x61\xE1\x98\x66\x78\x19\x9F\x87\x87\x9F\xF8\x1E\x66\x18\x06\x1F\x86\x61\x98\x1E\x7F\xF9\xE1\xF9\xE1\x80\x1E\x66\x18\x06\x1F\x86\x61\x98\x1E\x7F\xF9\xE1\xF9\xE1\x80\x19\x87\x81\xE0\x79\xE1\x80\x7E\x78\x18\x1F\x86\x07\x9F\xF8\x19\x87\x81\xE0\x79\xE1\x80\x7E\x78\x18\x1F\x86\x07\x9F\xF8\x07\xE6\x66\x79\x9F\x87\xE1\x99\x86\x7F\xE1\x99\x98\x61\x98\x07\xE6\x66\x79\x9F\x87\xE1\x99\x86\x7F\xE1\x99\x98\x61\x98\x01\x81\x86\x66\x61\xE1\x98\x66\x78\x19\x9F\x87\x80\x67\xF8\x01\x81\x86\x66\x61\xE1\x98\x66\x78\x19\x9F\x87\x80\x67\xF8MW317Ti\x1E\x66\x01\xFF\x9F\x86\x61\x98\x1E\x7F\xF9\xF9\x9E\x1E\x60\x1E\x66\x01\xFF\x9F\x86\x61\x98\x1E\x7F\xF9\xF9\x9E\x1E\x60\x07\x9F\xF9\xF8\x79\xE1\x80\x7E\x78\x18\x1F\x86\x18\x78\x00\x07\x9F\xF9\xF8\x79\xE1\x80\x7E\x78\x18\x1F\x86\x18\x78\x00\x00\x7E\x78\x79\x9F\x87\xE7\x99\x81\xF8\x66\x66\x06\x1E\x00\x00\x7E\x78\x79\x9F\x87\xE7\x99\x81\xF8\x66\x66\x06\x1E\x00\x06\x67\xF9\xE1\x81\x81\xFF\x86\x7F\x9E\x18\x00\x7F\x81\x80\x06\x67\xF9\xE1\x81\x81\xFF\x86\x7F\x9E\x18\x00\x7F\x81\x80\x06\x1E\x78\x78\x67\xFE\x1E\x60\x19\xF8\x7E\x66\x67\xE7\x80\x06\x1E\x78\x78\x67\xFE\x1E\x60\x19\xF8\x7E\x66\x67\xE7\x80\x00\x7F\x9F\xE6\x06\x1E\x79\x86\x7E\x1E\x19\x80\x7E\x01\xF8\x00\x7F\x9F\xE6\x06\x1E\x79\x86\x7E\x1E\x19\x80\x7E\x01\xF8\x00\x1E\x7F\x86\x60\x78\x1E\x61\xE1\x98\x06\x06\x07\xE7\x98\x00\x1E\x7F\x86\x60\x78\x1E\x61\xE1\x98\x06\x06\x07\xE7\x98\x1F\xE7\xE1\x81\x86\x06\x7F\x86\x07\xE6\x60\x7E\x78\x06\x78\x1F\xE7\xE1\x81\x86\x06\x7F\x86\x07\xE6\x60\x7E\x78\x06\x78\x01\x9E\x00\x60\x61\xF8\x1E\x60\x61\x80\x06\x18\x66\x66\x60\x01\x9E\x00\x60\x61\xF8\x1E\x60\x61\x80\x06\x18\x66\x66\x60\x19\x87\x98\x66\x06\x1E\x79\x86\x06\x66\x61\xFF\xF8\x00\x00\x19\x87\x98\x66\x06\x1E\x79\x86\x06\x66\x61\xFF\xF8\x00\x00\x1F\xF8\x07\x81\xE0\x78\x1E\x61\xE1\x98\x06\x06\x66\x66\x60MW317Ti\x1F\xF8\x07\x81\xE0\x78\x1E\x61\xE1\x98\x06\x06\x66\x66\x60\x00\x01\xF9\xFF\x86\x06\x7F\xFF\x87\xE6\x60\x78\x1F\xF9\x80\x00\x01\xF9\xFF\x86\x06\x7F\xFF\x87\xE6\x60\x78\x1F\xF9\x80\x00\x00\x18\x7F\xE1\xF8\x1F\x81\xE1\x80\x06\x1E\x18\x1E\x60\x00\x00\x18\x7F\xE1\xF8\x1F\x81\xE1\x80\x06\x1E\x18\x1E\x60\x1F\xFF\x99\xE6\x06\x1E\x79\x99\x86\x66\x61\xF8\x19\x98\x00\x1F\xFF\x99\xE6\x06\x1E\x79\x99\x86\x66\x61\xF8\x19\x98\x00\x18\x01\x87\x87\xE0\x78\x1F\x81\xE1\x98\x06\x7E\x18\x1E\x60\x18\x01\x87\x87\xE0\x78\x1F\x81\xE1\x98\x06\x7E\x18\x1E\x60\x19\xF9\x9E\x1E\x06\x06\x7F\xFF\x87\xE6\x60\x60\x1F\xF9\x80\x19\xF9\x9E\x1E\x06\x06\x7F\xFF\x87\xE6\x60\x60\x1F\xF9\x80\x19\xF9\x9F\xE1\xE1\xF8\x18\x01\xE1\x80\x06\x7E\x18\x19\x80\x19\xF9\x9F\xE1\xE1\xF8\x18\x01\xE1\x80\x06\x7E\x18\x19\x80\x19\xF9\x99\xFF\x86\x1E\x7F\xE7\x86\x66\x61\xF8\x66\x07\x80\x19\xF9\x99\xFF\x86\x1E\x7F\xE7\x86\x66\x61\xF8\x66\x07\x80\x18\x01\x9E\x66\x60\x78\x19\x81\xE6\x1F\x81\x81\x80\x61\x80\x18\x01\x9E\x66\x60\x78\x19\x81\xE6\x1F\x81\x81\x80\x61\x80\x1F\xFF\x9E\x07\xE6\x66\x1F\xE7\x80\x61\xE7\xFF\xE6\x67\xE0\x1F\xFF\x9E\x07\xE6\x66\x1F\xE7\x80\x61\xE7\xFF\xE6\x67\xE0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00MW317Ti\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0F\xC0\x3E\x00\xE0\x38\x30\x00\xF8\x1F\xF0\x00\x00\x00\x00\x1C\xE0\x77\x00\xE0\x38\x30\x03\x9E\x1F\xF8\x00\x00\x00\x00\x18\x70\xC1\x81\xF0\x3C\x30\x07\x06\x18\x18\x00\x00\x00\x00\x18\x01\x81\x01\xB0\x3C\x30\x06\x03\x18\x18\x00\x00\x00\x00\x1C\x01\x80\x01\xB8\x36\x30\x04\x03\x18\x18\x00\x00\x00\x00\x0F\x81\x80\x03\x18\x37\x30\x0C\x03\x1C\x38\x00\x00\x00\x00\x03\xE1\x80\x03\x18\x33\x30\x0C\x01\x1F\xE0\x00\x00\x00\x00\x00\x71\x80\x07\x0C\x31\xB0\x04\x03\x18\xC0\x00\x00\x00\x00\x00\x31\x80\x07\xFC\x31\xF0\x06\x03\x18\x60\x00\x00\x00\x00\x30\x31\x81\x87\xFE\x30\xF0\x06\x33\x18\x30\x00\x00\x00\x00\x18\x30\xC3\x8C\x06\x30\xF0\x03\x1E\x18\x18\x00\x00\x00\x00\x1F\xE0\x7F\x0C\x07\x30\x70\x01\xFE\x18\x1C\x00\x00\x00\x00\x07\x80\x1C\x1C\x03\x30\x30\x00\x73\x98\x0C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00MW317Ti\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xE0\x1F\x81\xFC\x0F\xF8\x00\x00\x00\x00\x00\x00\x00\x00\x0E\x70\x79\xC1\xFF\x0F\xF8\x00\x00\x00\x00\x00\x00\x00\x00\x18\x38\x60\x61\x83\x0C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\xC0\x61\x81\x8C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\xC0\x31\x81\x8C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\xC0\x31\x81\x8F\xF8\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\xC0\x31\x81\x8F\xF8\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\xC0\x31\x81\x8C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\xC0\x31\x81\x8C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x18\xE0\x61\x81\x8C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0C\x30\x60\xE1\x83\x0C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xF0\x3F\x81\xFE\x0F\xFC\x00\x00\x00\x00\x00\x00\x00\x00\x01\xC0\x0E\x01\xF0\x0F\xFC\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" + "DI0060000Ti";
        private const string SLAVE_DISPLAY_SWIPE      = "*@102J1000K100810000010";
        private const string SLAVE_DISPLAY_SWIPE_DISP = "*@105S1004300 Z 0060216  D 0200000   SWIPE CARD   D 0200100   ON  PINPAD   J1000K100800001010";
        private const string SLAVE_DISPLAY_APP_HUB    = "*@111ZH0071020101D 0240000SELECT PAYMENT TYPE:D 024010065|AfterPay         D 024020089|Zip              D 024030067|Humm             D 024040072|OpenPay          D 024050066|Alipay           D 024060069|WeChat Pay       D 024070070|Klarna           D 024080062|QantasPoints     K200811111111";
        private const string SLAVE_DISPLAY_MENU       = "*@112ZM0071020101D 0240000SELECT MENU ITEM:   D 0240100MENU ITEM 1         D 0240200MENU ITEM 2         D 0240300MENU ITEM 3         D 0240400MENU ITEM 4         D 0240500MENU ITEM 5         D 0240600MENU ITEM 6         D 0240700MENU ITEM 7         D 0240800MENU ITEM 8         D 0240900MENU ITEM 9         K200811111111";
        private const string SLAVE_DISPLAY_QR1        = "*@107MD002TqMW018TqCan You Read QR?ZQ0070716101D 024030HTq                  D 0240400LINE 3 EXAMPLE      D 0240500LINE 4 EXAMPLE      K200811111111";
        private const string SLAVE_DISPLAY_QR2        = "*@107MD002TqMW018TqCan You Read QR?ZQ0070716101D 024030HTq                  D 0240400LINE 3 EXAMPLE      D 0240500LINE 4 EXAMPLE      K200811111111";

        public RelayCommand SlaveModeEnterCommand           => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_MODE_ENTER));
        public RelayCommand SlaveModeExitCommand            => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_MODE_EXIT));
        public RelayCommand SlaveModeStatusCommand          => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_MODE_STATUS));
        public RelayCommand SlaveInputAlphaCommand          => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_INPUT_ALPHA));
        public RelayCommand SlaveInputDefaultCommand        => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_INPUT_DEFAULT));
        public RelayCommand SlaveInputAmountCommand         => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_INPUT_AMOUNT));
        public RelayCommand SlaveInputMaskedCommand         => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_INPUT_MASKED));
        public RelayCommand SlaveDisplayLines2Command       => DoSlaveDispLines(2);
        public RelayCommand SlaveDisplayLines3Command       => DoSlaveDispLines(3);
        public RelayCommand SlaveDisplayLines4Command       => DoSlaveDispLines(4);
        public RelayCommand SlaveDisplayLines5Command       => DoSlaveDispLines(5);
        public RelayCommand SlaveDisplayLines6Command       => DoSlaveDispLines(6);
        public RelayCommand SlaveDisplayLines7Command       => DoSlaveDispLines(7);
        public RelayCommand SlaveDisplayLines8Command       => DoSlaveDispLines(8);
        public RelayCommand SlaveDisplayLines9Command       => DoSlaveDispLines(9);
        public RelayCommand SlaveDisplayLines10Command      => DoSlaveDispLines(10);
        public RelayCommand SlaveKeyOneCommand              => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_KEY_ONE ));
        public RelayCommand SlaveKeyManyCommand             => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_KEY_MANY));
        public RelayCommand SlaveKeyOffCommand              => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_KEY_OFF));
        public RelayCommand SlaveImage32x32Command          => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_IMAGE_32x32));
        public RelayCommand SlaveImage128x64Command         => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_IMAGE_128x64));
        public RelayCommand SlaveImage160x219Command        => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_IMAGE_160x219));
        public RelayCommand SlaveImage160x240Command        => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_IMAGE_160x240));
        public RelayCommand SlaveImage120x160Command        => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_IMAGE_120x160));
        public RelayCommand SlaveDisplaySwipeCommand        => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_DISPLAY_SWIPE));
        public RelayCommand SlaveDisplaySwipeDisplayCommand => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_DISPLAY_SWIPE_DISP));
        public RelayCommand SlaveDisplayAppHubCommand       => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_DISPLAY_APP_HUB));
        public RelayCommand SlaveDisplayMenuCommand         => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_DISPLAY_MENU));
        public RelayCommand SlaveDisplayQR1Command          => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_DISPLAY_QR1));
        public RelayCommand SlaveDisplayQR2Command          => new RelayCommand(async (o) => await eftw.DoSlaveMode(SLAVE_DISPLAY_QR2));
        #endregion

        #region Send Key
        public RelayCommand SendKeyCommand
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.SendKey(Data.SelectedPosKey, Data.PosData);
                });
            }
        }

        public RelayCommand ToggleSendKey
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    if (!Data.SendKeyEnabled)
                    {
                        Data.SendKeyEnabled = true;
                        await eftw.StartSendKeysTest(Data.SelectedPosKey);
                    }
                    else
                    {
                        Data.SendKeyEnabled = false;
                        eftw.StopSendKeysTest();
                    }
                });
            }
        }

        public async void ToggleStop()
        {
            if (!Data.SendKeyEnabled)
            {
                Data.SendKeyEnabled = true;
                await eftw.StartSendKeysTest(Data.SelectedPosKey);
            }
            else
            {
                Data.SendKeyEnabled = false;
                eftw.StopSendKeysTest();

            }
        }

        //RelayCommand _proxySendKey;
        //public RelayCommand ProxySendKey => _proxySendKey ?? (_proxySendKey = new RelayCommand(async (o) =>
        //{
        //    string name = o.ToString();
        //    EFTPOSKey key = EFTPOSKey.OkCancel;

        //    if (EnumContains(name, out key))
        //    {
        //        await _eftw.SendKey(key, (key == EFTPOSKey.Authorise) ? _data.PosData : string.Empty);
        //        ShowProxyDialog(false);
        //    }
        //}));

        //public RelayCommand ProxySendKey
        //{
        //    get
        //    {
        //        return new RelayCommand(async (o) =>
        //        {
        //            string name = o.ToString();
        //            EFTPOSKey key = EFTPOSKey.OkCancel;

        //            if (EnumContains(name, out key))
        //            {
        //                await _eftw.SendKey(key, (key == EFTPOSKey.Authorise) ? _data.PosData : string.Empty);
        //                ShowProxyDialog(false);
        //            }
        //        });
        //    }
        //}

        //public async Task ProxySendKeyFunc(EFTPOSKey key)
        //{
        //    await _eftw.SendKey(key);
        //}

        #endregion

        #region PIN
        public RelayCommand AuthPin
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.AuthPin();
                });
            }
        }

        public RelayCommand ChangePin
        {
            get
            {
                return new RelayCommand(async (o) =>
                {
                    await eftw.ChangePin();
                });
            }
        }
        #endregion

        #region Proxy Dialog

        //public bool ProxyWindowClosing = false;
        public RelayCommand UseProxyDialog
        {
            get
            {
                return new RelayCommand((o) =>
                {
                    ShowProxyDialog(true);
                });
            }
        }

        ProxyViewModel proxyVM = new ProxyViewModel();
        public ProxyViewModel ProxyVM
        {
            get { return proxyVM; }
            set
            {
                proxyVM = value; NotifyPropertyChanged(nameof(ProxyVM));
            }
        }

        public void ShowProxyDialog(bool show)
        {
            if (show)
            {
                if (!proxy.IsVisible)
                {
                    ProxyVM.ProxyWindowClosing = true;
                    proxy.Close();
                    proxy = new ProxyDialog
                    {
                        DataContext = ProxyVM // this;
                    };
                    proxy.Show();
                    ProxyVM.ProxyWindowClosing = false;
                }
            }
            else
            {
                if (Data.Settings.DemoDialogOption == DemoDialogMode.AlwaysShow)
                {
                    ProxyVM.DisplayDetails = new EFTDisplayResponse();
                }
                else
                {
                    proxy.Hide();
                }
            }
        }

        #endregion
    }

}
